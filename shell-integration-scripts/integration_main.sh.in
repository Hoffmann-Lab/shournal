
# Shell integration for shournal
# This file contains all public functions and
# must be compatible with all supported shells.

SHOURNAL_ENABLE(){
    local cmd_path args_array line ret=0
    local clusterjob_reexec_counter

    if _shournal_is_subshell; then
        _shournal_warn "shournal's shell integration must not be enabled from" \
                       "within a subshell"
        return 1
    fi

    if [ -z "$(command -v shournal)" ] ; then
        _shournal_error "cannot enable shournal's shell integration - command «shournal» not found"
        return 1
    fi

    if [ -z "$(command -v "$_shournal_run_backend")" ] ; then
        _shournal_error "cannot enable shournal's shell integration - " \
                        "command «$_shournal_run_backend» not found"
        return 1
    fi

    if ! shournal --validate-settings; then
        # informative mesg. should have been already printed by shournal
        _shournal_error "shell integration is _not_ enabled"
        return 1
    fi

    if [ -n "${_SHOURNAL_CLUSTERJOB_JUST_REEXECUTED+x}" ]; then
        _shournal_debug "shournal just re-executed this clusterjob." \
                        "SHOURNAL_ENABLE is ignored this time."
        unset _SHOURNAL_CLUSTERJOB_JUST_REEXECUTED
        return 0
    fi

    if _shournal_clusterjob_reexec_ok; then
        # Do not use BASH_EXECUTION_STRING, it is not set in all cluster jobs.
        args_array=()
        while IFS= read -r -d '' line; do
            args_array+=("$line")
        done < /proc/$$/cmdline
        if [ ${#args_array[@]} -lt 2 ]; then
            _shournal_warn "SHOURNAL_ENABLE: we detected ${args_array[*]} as" \
                           "cluster job without arguments. Please report."
        else
            cmd_path="$(readlink /proc/$$/exe)"
            _shournal_debug "running cluster job: $cmd_path ${args_array[*]}"
            clusterjob_reexec_counter=${_SHOURNAL_CLUSTERJOB_REEXEC_COUNTER:-0}
            [ $clusterjob_reexec_counter -gt 0 ] &&
                _shournal_debug "unusual clusterjob_reexec_counter of $clusterjob_reexec_counter"
            ((++clusterjob_reexec_counter))
            _SHOURNAL_CLUSTERJOB_REEXEC_COUNTER="$clusterjob_reexec_counter" \
                _SHOURNAL_CLUSTERJOB_JUST_REEXECUTED=true exec \
                shournal --backend-filename "$_shournal_run_backend" \
                --verbosity "$_SHOURNAL_VERBOSITY" \
                --exec-filename "$cmd_path" --exec -- "${args_array[@]}"
            # only get here on error
            return 1
        fi
    fi

    if [ -z "${_shournal_shell_exec_string+x}" ]; then
         # Running somewhat "interactively"
        _shournal_verbose_history_check || return $?
    fi

    _shournal_enable || ret=$?
    return $ret
}


SHOURNAL_DISABLE() {
    # In case we were called in a sequence, e.g.
    # $ (exit 123); SHOURNAL_DISABLE
    # capture the exit code here
    local exitcode=$?
    local ret=0

    if _shournal_is_subshell; then
        _shournal_warn "shournal's shell integration must not be disabled from" \
                       "within a subshell"
        return 1
    fi

    if _shournal_is_clusterjob && [ -n "${_SHOURNAL_CLUSTERJOB_REEXEC_COUNTER+x}" ]; then
        _shournal_warn "shournal seems to trace this process as a cluster job" \
                       "and cannot be disabled in that mode."
        return 1
    fi

    _shournal_disable $exitcode || return ret=$?
    if [ $ret -eq 0 ]; then
        unset _shournal_current_pid SHOURNAL_SESSION_ID SHOURNAL_CMD_COUNTER
    fi
    return $ret
}


# $1: pass one of dbg, info, warning, critical
SHOURNAL_SET_VERBOSITY(){
    case "$1" in
    "dbg")
        _shournal_shell_integration_log_level=0
        ;;
    "info")
        _shournal_shell_integration_log_level=1
        ;;
    "warning")
        _shournal_shell_integration_log_level=2
        ;;
    "critical")
        _shournal_shell_integration_log_level=3
        ;;
    *)
        _shournal_warn "Bad verbosity passed. Pass one of dbg, info, warning, critical"
        return 1
        ;;
    esac

    # verbosity for shournal-run*
    export _SHOURNAL_VERBOSITY="$1"
    _shournal_set_verbosity "$1"
}

SHOURNAL_PRINT_VERSIONS() {
    echo "shournal $_SHOURNAL_SHELL_NAME integration version: $_shournal_version"
    echo "shournal: $(shournal --version)"
    _shournal_print_versions
}


# _________ End of public interface _________ #


# BEGIN_SECTION auto-filled by cmake
_shournal_version="@shournal_version@"

# -z: Allow to be overwritten
[ -z "${SHOURNAL_PATH_LIB_SHELL_INTEGRATION+x}" ] &&
  export SHOURNAL_PATH_LIB_SHELL_INTEGRATION="@full_path_libshournal@"

# END_SECTION auto-filled by cmake


# We have to set several global variables here and _not_ in SHOURNAL_ENABLE
# for the libshournal-shellwatch.so LD_PRELOAD-hack. If it is not
# not loaded, on SHOURNAL_ENABLE we exec the current shell again and
# perform the actual initialization. Therefore, *this*
# script must be sourced within the shell's rc but we don't want to
# require SHOURNAL_ENABLE within the rc-file.

# 0: debug, 1: info, 2: warning, 3: error
[ -z "${_shournal_shell_integration_log_level+x}" ] &&
    _shournal_shell_integration_log_level=2
# verbosity for shournal-run* ( _must_ be exported )
[ -z "${_SHOURNAL_VERBOSITY+x}" ] &&
    export _SHOURNAL_VERBOSITY="warning"
# verbosity for libshournal-shellwatch.so ( _must_ be exported )
[ -z "${_SHOURNAL_LIB_SHELL_VERBOSITY+x}" ] &&
    export _SHOURNAL_LIB_SHELL_VERBOSITY="warning"


# Setup non-portable stuff for
# each supported shell. The following variables _must_ be set:
# _SHOURNAL_SHELL_NAME  (name of the current shell). It must be exported
# for libshournal-shellwatch.so.
# _shournal_shell_exec_string - if and only if the command is executed non-interactively
# For zsh aliases: avoid error on double source
unalias _shournal_trap_set &>/dev/null || :
if [ -n "${BASH_VERSION+x}" ]; then
export _SHOURNAL_SHELL_NAME='bash'

# The bash execution string is e.g. set when running bash -c 'echo foo', in which case we never get to
# any prompt. Simply execute the whole command
# within shournal.
# Checking $BASH_EXECUTION_STRING seems to be more reliable than [[ $- == *i* ]], because
# of commands like e.g. bash -i -c 'echo "wtf - is that interactive?"'
[ -n "${BASH_EXECUTION_STRING+x}" ] &&
    _shournal_shell_exec_string="$BASH_EXECUTION_STRING"

_shournal_trap_push(){
    local trap_tmp
    # First save to temporary variable, as we are not interrupt-safe yet
    trap_tmp="$(trap -p INT)"
    trap "$@"
    _shournal_int_traps+=("$trap_tmp")
    return 0
}

_shournal_trap_pop(){
    local old_trap
    if [ ${#_shournal_int_traps[@]} -eq 0 ]; then
        _shournal_error "_shournal_trap_pop - no int trap set" >&2
        return 1
    fi
    old_trap="${_shournal_int_traps[-1]}"
    # first unset: if we reset to default trap and user hits Ctrl+C, we would
    # leak the array element
    unset _shournal_int_traps[-1]
    if [ -z "$old_trap" ]; then
        trap - INT
    else
        eval "$old_trap"
    fi
    return 0
}

elif [ -n "${ZSH_VERSION+x}" ]; then

export _SHOURNAL_SHELL_NAME='zsh'

[ -n "${ZSH_EXECUTION_STRING+x}" ] &&
    _shournal_shell_exec_string="$ZSH_EXECUTION_STRING"

# This has to be at the top, so aliases are expanded in the other functions (files
# are appended to this script)
setopt aliases
alias _shournal_trap_push='setopt localtraps; trap'
_shournal_trap_pop(){ :; }

else
    echo "shournal shell integration: sourced from unsupported shell - " \
         "currently only bash and zsh are supported." >&2
    return 1
fi
