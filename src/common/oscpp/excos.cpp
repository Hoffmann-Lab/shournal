
#include <unistd.h>
#include <cstring>
#include <iostream>
#include <utility>


#include "excos.h"
#include "translation.h"


os::ExcOsCommon::ExcOsCommon(std::string text) :
    m_descrip(std::move(text))
{}

const char *os::ExcOsCommon::what() const noexcept
{
    return m_descrip.c_str();
}

os::ExcOsCommon::ExcOsCommon()
= default;


os::ExcOs::ExcOs(const std::string &preamble) : m_errorNumber(errno)
  {
    if(preamble.empty()){
        m_descrip += "ExcOs occurred:";
    } else {
        m_descrip += preamble;
    }
    m_descrip += " (" + std::to_string(errno) +
            "): " + translation::strerror_l(errno);
#ifndef NDEBUG
    // maybe_todo: also outside of debug - performance?
    m_descrip += "\n" + generate_trace_string();
#endif
}

/// If errorNumber is zero, no preamble is autogenerated.
os::ExcOs::ExcOs(const std::string &preamble, int errorNumber) : m_errorNumber(errorNumber)
  {
    if(preamble.empty()){
        m_descrip += "ExcOs occurred:";
    } else {
        m_descrip += preamble;
    }
    if(errorNumber != 0){
        m_descrip += " (" + std::to_string(errorNumber) +
                "): " + translation::strerror_l(errorNumber);
    }

}


int os::ExcOs::errorNumber() const
{
    return m_errorNumber;
}



/// @param status: depending on typeOfTerm, currently only the signal number (NOT_IMPLEMENTED)
os::ExcProcessExitNotNormal::ExcProcessExitNotNormal(int status, TypeOfTerm typeOfTerm) :
    ExcOsCommon ("Process terminated not normally: " + std::to_string(status)),
    m_status(status),
    m_typeOfTermination(typeOfTerm)
{}

int os::ExcProcessExitNotNormal::status() const
{
    return m_status;
}

os::ExcProcessExitNotNormal::TypeOfTerm
os::ExcProcessExitNotNormal::typeOfTermination() const
{
    return m_typeOfTermination;
}


